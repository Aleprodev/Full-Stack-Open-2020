{"version":3,"sources":["components/note.js","services/notes.js","components/notification.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","baseUrl","noteService","getAll","axios","get","create","newObject","post","update","id","put","Notification","message","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","then","response","data","notesToShow","filter","Footer","style","color","fontStyle","contSize","map","find","n","changedNote","catch","setTimeout","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"4KAaeA,EAXF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACdC,EAAQF,EAAKG,UACjB,qBAAuB,iBACzB,OACE,qBAAIC,UAAU,OAAd,UACGJ,EAAKK,QACN,wBAAQC,QAASL,EAAjB,SAAoCC,Q,gBCPpCK,EAAU,aAcDC,EAFK,CAAEC,OAVP,kBAAMC,IAAMC,IAAIJ,IAUDK,OARf,SAAAC,GACb,OAAOH,IAAMI,KAAKP,EAASM,IAOSE,OAJvB,SAACC,EAAIH,GAClB,OAAOH,IAAMO,IAAN,UAAaV,EAAb,YAAwBS,GAAMH,KCIxBK,EAZM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAgB,OAAZA,EACK,KAIP,qBAAKf,UAAU,QAAf,SACGe,KCkHQC,EAtHH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACTC,EADS,KACFC,EADE,OAEcF,mBAAS,IAFvB,mBAETG,EAFS,KAEAC,EAFA,OAGcJ,oBAAS,GAHvB,mBAGTK,EAHS,KAGAC,EAHA,OAIwBN,mBAAS,MAJjC,mBAITO,EAJS,KAIKC,EAJL,KAMhBC,qBAAU,WACRtB,EACGC,SACAsB,MAAK,SAAAC,GACJT,EAASS,EAASC,WAErB,IAEH,IAqDMC,EAAcR,EAChBJ,EACAA,EAAMa,QAAO,SAAAnC,GAAI,OAAIA,EAAKG,aAExBiC,EAAS,WAOb,OACE,sBAAKC,MAPa,CAClBC,MAAO,QACPC,UAAW,SACXC,SAAU,IAIV,UACE,uBACA,4GAQN,OACE,gCACE,uCACA,cAAC,EAAD,CAAcrB,QAASS,IACvB,yBAAQtB,QAAS,kBAAMqB,GAAYD,IAAnC,kBACQA,EAAU,YAAc,SAEhC,6BACGQ,EAAYO,KAAI,SAAAzC,GAAI,OACnB,cAAC,EAAD,CAEEA,KAAMA,EACNC,iBAAkB,kBAvFH,SAAAe,GACvB,IAAMhB,EAAOsB,EAAMoB,MAAK,SAAAC,GAAC,OAAIA,EAAE3B,KAAOA,KAChC4B,EAAW,2BAAQ5C,GAAR,IAAcG,WAAYH,EAAKG,YAEhDK,EACGO,OAAOC,EAAI4B,GACXb,MAAK,SAAAC,GACJT,EAASS,EAASC,SAEnBY,OAAM,WACLhB,EAAgB,SAAD,OACJ7B,EAAKK,QADD,0BAGfyC,YAAW,WACTjB,EAAgB,QACf,KACHN,EAASD,EAAMa,QAAO,SAAAQ,GAAC,OAAIA,EAAE3B,KAAOA,SAuERf,CAAiBD,EAAKgB,MAFzChB,EAAKgB,SAOhB,uBAAM+B,SAxEM,SAACC,GAKf,GAJAA,EAAMC,iBAEY3B,EAAMoB,MAAK,SAAAC,GAAC,OAAIA,EAAEtC,UAAYmB,KAG9CK,EAAgB,GAAD,OAAIL,EAAJ,oBAEfsB,YAAW,WACTjB,EAAgB,QACf,SAEE,CAEL,IAAMqB,EAAa,CACjB7C,QAASmB,EACT2B,MAAM,IAAIC,MAAOC,cACjBlD,UAAWmD,KAAKC,SAAW,IAG7B/C,EACGI,OAAOsC,GACPnB,MAAK,SAAAC,GACJT,EAASS,EAASC,MAClBR,EAAW,SAgDf,UACE,uBACE+B,MAAOhC,EACPiC,SA9CiB,SAACT,GACxBvB,EAAWuB,EAAMU,OAAOF,UA+CpB,wBAAQG,KAAK,SAAb,qBAEF,cAACvB,EAAD,Q,MClHNwB,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.335b9393.chunk.js","sourcesContent":["import React from 'react'\n\nconst Note = ({ note, toggleImportance }) => {\n  const label = note.important\n  ? 'Make not important' : 'Make important'\n  return (\n    <li className='note'>\n      {note.content}\n      <button onClick={toggleImportance}>{label}</button>\n    </li>\n  )\n}\n\nexport default Note","import axios from 'axios';\nconst baseUrl = '/api/notes';\n\nconst getAll = () => axios.get(baseUrl)\n\nconst create = newObject => {\n  return axios.post(baseUrl, newObject)\n};\n\nconst update = (id, newObject) => {\n  return axios.put(`${baseUrl}/${id}`, newObject)\n};\n\nconst noteService = { getAll, create, update }\n\nexport default noteService;","import React from 'react';\r\n\r\nconst Notification = ({ message }) => {\r\n  if (message === null) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <div className=\"error\">\r\n      {message}\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default Notification;","import React, { useState, useEffect } from 'react';\nimport Note from './components/note';\nimport noteService from './services/notes';\nimport Notification from './components/notification';\n\nconst App = () => {\n  const [notes, setNotes] = useState([])\n  const [newNote, setNewNote] = useState('')\n  const [showAll, setShowAll] = useState(true)\n  const [errorMessage, setErrorMessage] = useState(null)\n\n  useEffect(() => {\n    noteService\n      .getAll()\n      .then(response => {\n        setNotes(response.data)\n      })\n  }, []);\n\n  const toggleImportance = id => {\n    const note = notes.find(n => n.id === id)\n    const changedNote = { ...note, important: !note.important }\n\n    noteService\n      .update(id, changedNote)\n      .then(response => {\n        setNotes(response.data)\n      })\n      .catch(() => {\n        setErrorMessage(\n          `Note '${note.content}' was already removed`\n        )\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 5000);\n        setNotes(notes.filter(n => n.id !== id))\n      })\n  };\n\n  const addNote = (event) => {\n    event.preventDefault()\n    \n    const noteExist = notes.find(n => n.content === newNote)\n\n    if (noteExist) {\n      setErrorMessage(`${newNote} already exists`)\n\n      setTimeout(() => {\n        setErrorMessage(null)\n      }, 5000);\n\n    } else {\n\n      const noteObject = {\n        content: newNote,\n        date: new Date().toISOString(),\n        important: Math.random() > 0.5,\n      }\n\n      noteService\n        .create(noteObject)\n        .then(response => {\n          setNotes(response.data)\n          setNewNote('')\n        })\n    }\n  };\n\n  const handleNoteChange = (event) => {\n    setNewNote(event.target.value)\n  };\n\n  const notesToShow = showAll\n    ? notes\n    : notes.filter(note => note.important)\n\n  const Footer = () => {\n    const footerStyle = {\n      color: 'green',\n      fontStyle: 'italic',\n      contSize: 16,\n    }\n\n    return (\n      <div style={footerStyle}>\n        <br />\n        <em>\n          Note app, Departament of Computer Science,\n          University of Helsinki 2021\n        </em>\n      </div>\n    )\n  }\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n      <button onClick={() => setShowAll(!showAll)}>\n        show {showAll ? 'important' : 'all'}\n      </button>\n      <ul>\n        {notesToShow.map(note =>\n          <Note\n            key={note.id}\n            note={note}\n            toggleImportance={() => toggleImportance(note.id)}\n          />\n        )}\n      </ul>\n\n      <form onSubmit={addNote}>\n        <input\n          value={newNote}\n          onChange={handleNoteChange}\n        />\n        <button type=\"submit\">save</button>\n      </form>\n      <Footer />\n    </div>\n  )\n};\n\nexport default App;","import ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}